#!/usr/bin/env python
# Note:
# Originally written by guanqun (https://github.com/guanqun/) Sep 29, 2011
# Edited by Intrepid (https://github.com/intrepid/) Apr 12, 2012
# 2017-11-08 Paul Kienzle
# * py2/py3 support, matplotlib support, code cleanup
from __future__ import print_function, division

import sys
import os
import math
import subprocess
from email.utils import mktime_tz, parsedate_tz, formatdate

try:
    import cairo
except ImportError:
    cairo = None

class Options:
    author = ''
    width = 1100
    output_file = None
    path = os.getcwd()
    opaque = -1
    timezone = None
    gitopts = ()
    plotter = 'cairo' if cairo is not None else 'matplotlib'

def get_opts():
    if len(sys.argv) > 1 and sys.argv[1] in ("-h", "-?", "--help"):
        print("""
SYNTAX:    git punchchard [option=value] [--opt=value]

Available options:
    width: plot width (in pixels)
    file: output file (extension should be the image format)
    path: path to the git repo
    opaque: gray-scale color for circles in (0.0, 1.0), or -1 for auto
    utc: true if time zone is utc
    timezone: floating point number of hours off utc
    plotter: "matplotlib" or "cairo"

Options starting with '-' are sent directly to the git log command.  For
example, git

EXAMPLE:   git punchchard file=outputfile.png width=4000
This creates 'outputfile.png', a 4000px wide png image

EXAMPLE:   git punchcard path=/home/siddharth/code/punchcard
This creates a punch card of the git repository at the given path

EXAMPLE:   git punchcard opaque=0
This sets the opacity of all the circles to constant value 0
0 -> Black, 1 -> White (invisible)

EXAMPLE:   git punchcard timezone=+7.5
This shows the graph with all times converted to timezone UTC+7.5
If your contributors live in multiple timezones, this helps you
in getting a relative estimate of when they work.
""")

        sys.exit(0)

    options = Options()

    options.gitopts = list(arg for arg in sys.argv[1:] if arg.startswith('-'))
    args = dict(arg.split('=', 1) for arg in sys.argv[1:] if not arg.startswith('-'))

    for name, value in args.items():
        if name == 'width':
            options.width = int(value)
        elif name == 'author':
            options.author = value
        elif name == 'file':
            options.output_file = value
        elif name == 'path':
            options.path = value
        elif name == 'opaque':
            try:
                options.opaque = float(value)
            except ValueError as error:
                print("WARNING: Could not parse the opaque argument you gave. Please \
                enter a value between 0 and 1")
                options.opaque = -1
        elif name == 'utc':
            options.timezone = 0 if value == '1' else None
        elif name == 'timezone':
            try:
                options.timezone = float(value)
            except ValueError as error:
                print("WARNING: COULD not parse timezone argument.")
                print("Please enter a decimal value. Eg: 3.0, -11.5")
                options.timezone = None
        elif name == 'plotter':
            options.plotter = value
        elif name == 'gitopts':
            # support for old-style gitopts="..."
            options.gitopts.append(value)
        else:
            raise ValueError("unknown argument %r"%name)

    return options

DAYS = ['Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon', 'Sun']
HOURS = ['12am'] + [str(x) for x in range(1, 12)] + ['12pm'] + [str(x) for x in range(1, 12)]
def get_x_y_from_date(day, hour):
    return hour, DAYS.index(day)

def get_log_data(path, gitopts=()):
    gitcommand = ['git', 'log', '--no-merges', '--pretty=format:%aD']
    gitcommand.extend(gitopts)

    print('run cmd: ', ' '.join(gitcommand))

    try:
        cwd = os.getcwd()
        os.chdir(path)
        p = subprocess.Popen(gitcommand,
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
        outdata, errdata = p.communicate()
        outdata, errdata = outdata.decode(), errdata.decode()
    except OSError as e:
        print('Git not installed?')
        sys.exit(-1)
    finally:
        os.chdir(cwd)
    if outdata == '':
        print('Not a git repository? Author has no commits?')
        sys.exit(-1)
    return outdata

def histogram_logs(logs, timezone=None):
    """
    Computes the proportion for events that occur in each hour of the week.

    Hours are numbered from 0 starting at midnight and increasing to 23 for 11pm.
    Days are numbered from 0 starting on Saturday and increasing to 6 for sunday.

    Returns [(proportion, (hour, day))]
    """
    # CONVERT EVERYTHING TO UTC or ADD TIMEZONE OFFSET
    utc_offset = timezone != None and timezone * 3600 or 0

    fixed_stamps = logs.split('\n')

    if timezone != None:
        fixed_stamps = [formatdate(mktime_tz(parsedate_tz(x)) + utc_offset)
                        for x in fixed_stamps]

    data_log = [[x.strip().split(',')[0], x.strip().split(' ')[4].split(':')[0]]
                for x in fixed_stamps]

    # initialize each bin to zero
    stats = {}
    for d in DAYS:
        stats[d] = {}
        for h in range(0, 24):
            stats[d][h] = 0

    # accumulate bins
    total = 0
    for line in data_log:
        stats[ line[0] ][ int(line[1]) ] += 1
        total += 1

    # find max bin
    max_value = max(v for hours in stats.values() for v in hours.values())

    # convert bins to histogram elements, normalized to max bin
    hist = [(v/max_value, get_x_y_from_date(d, h))
            for d, hours in stats.items()
            for h, v in hours.items()]

    return hist

def cairo_plot(hist, width=Options.width, opaque=-1, path=None):
    import cairo

    if path is None:
        path = 'output.png'

    height = int(round(width/2.75, 0))

    # Calculate the relative distance
    distance = int(math.sqrt((width*height)/270.5))

    # Round the distance to a number divisible by 2
    if distance % 2 == 1:
        distance -= 1

    max_range = (distance/2) ** 2

    # Good values for the relative position
    left = width/18 + 10  # The '+ 10' is to prevent text from overlapping
    top = height/20 + 10
    indicator_length = height/20

    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
    cr = cairo.Context(surface)

    cr.set_line_width (1)

    # draw background to white
    cr.set_source_rgb(1, 1, 1)
    cr.rectangle(0, 0, width, height)
    cr.fill()

    # set black
    cr.set_source_rgb(0, 0, 0)

    # draw x-axis and y-axis
    cr.move_to(left, top)
    cr.rel_line_to(0, 8 * distance)
    cr.rel_line_to(25 * distance, 0)
    cr.stroke()

    # draw indicators on x-axis and y-axis
    x, y = left, top
    for i in range(8):
        cr.move_to(x, y)
        cr.rel_line_to(-indicator_length, 0)
        cr.stroke()
        y += distance

    x += distance
    for i in range(25):
        cr.move_to(x, y)
        cr.rel_line_to(0, indicator_length)
        cr.stroke()
        x += distance

    # select font
    cr.select_font_face ('sans-serif', cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)

    # and set a appropriate font size
    cr.set_font_size(math.sqrt((width*height)/3055.6))

    # draw Mon, Sat, ... Sun on y-axis
    x, y = (left - 5), (top + distance)
    for i in range(7):
        x_bearing, y_bearing, width, height, x_advance, y_advance = cr.text_extents(DAYS[i])
        cr.move_to(x - indicator_length - width, y + height/2)
        cr.show_text(DAYS[i])
        y += distance

    # draw 12am, 1, ... 11 on x-axis
    x, y = (left + distance), (top + (7 + 1) * distance + 5)
    for i in range(24):
        x_bearing, y_bearing, width, height, x_advance, y_advance = cr.text_extents(HOURS[i])
        cr.move_to(x - width/2 - x_bearing, y + indicator_length + height)
        cr.show_text(HOURS[i])
        x += distance

    for p, (x, y) in hist:
        x, y = (left + (x+1)*distance, top + (y+1)*distance)
        size = circle_size(p, distance/2 - 1)
        color = 1 - size if opaque < 0 else opaque
        cairo_circle(cr, (x, y), size, color)

    # write to output
    surface.write_to_png(path)

    print("punchcard written to output file at: %s" % os.path.join(os.getcwd(), path))

def circle_size(weight, max_radius):
    return int(math.ceil(math.sqrt(weight)*max_radius))

# draw circles according to their frequency
def cairo_circle(cr, pos, length, color):
    # find the position
    # max of length is half of the distance
    x, y = pos
    cr.set_source_rgba(color, color, color)
    cr.move_to(x, y)
    cr.arc(x, y, length, 0, 2 * math.pi)
    cr.fill()

def mpl_plot(hist, width=Options.width, opaque=-1, path=None):
    import matplotlib.pyplot as plt
    from matplotlib.patches import Circle
    import numpy as np

    height = int(round(width/2.75, 0))
    plt.figure(figsize=(width/72, height/72))

    weight, pos = zip(*hist)
    x, y = zip(*pos)
    #color = 1 - np.array(weight) if opaque < 0 else opaque
    #radius = np.sqrt(weight)*0.5
    #plt.scatter(x, y, s=radius, c=color)
    ax = plt.gca()
    for wk, xk, yk in zip(weight, x, y):
        color = 1 - wk if opaque < 0 else opaque
        size = math.sqrt(wk)*0.5
        ax.add_artist(Circle(xy=(xk+0.5, yk+0.5),
                      radius=size,
                      color=(color, color, color)))
    #plt.plot((0,24),(0,7))
    #plt.xlim((0, len(HOURS)+1))
    #plt.ylim((0, len(DAYS)+1))
    plt.xticks(np.arange(len(HOURS))+0.5, HOURS)
    plt.yticks(np.arange(len(DAYS))+0.5, DAYS)
    #plt.axis('equal')
    plt.axis([0, 24, 0, 7])
    if path:
        plt.savefig(path)
    else:
        plt.show()


if __name__ == '__main__':
    opt = get_opts()
    logs = get_log_data(opt.path, gitopts=opt.gitopts)
    hist = histogram_logs(logs, timezone=opt.timezone)
    if opt.plotter == 'matplotlib':
        mpl_plot(hist, width=opt.width, opaque=opt.opaque, path=opt.output_file)
    elif opt.plotter == 'cairo':
        cairo_plot(hist, width=opt.width, opaque=opt.opaque, path=opt.output_file)
    else:
        raise ValueError("unknown plotter %r"%opt.plotter)
